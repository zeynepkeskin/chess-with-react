{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zeyne\\\\OneDrive\\\\Desktop\\\\chess\\\\chess\\\\src\\\\components\\\\Chessboard\\\\Chessboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './Chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nexport const PieceType = {\n  PAWN: \"PAWN\",\n  BISHOP: \"BISHOP\",\n  KNIGHT: \"KNIGHT\",\n  ROOK: \"ROOK\",\n  QUEEN: \"QUEEN\",\n  KING: \"KING\"\n};\nconst initialBoardState = [];\nfor (let p = 0; p < 2; p++) {\n  const type = p === 0 ? \"d\" : \"l\";\n  const y = p === 0 ? 7 : 0;\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 0,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 7,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 1,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 6,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 2,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 5,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/q${type}.png`,\n    x: 3,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/k${type}.png`,\n    x: 4,\n    y\n  });\n}\n;\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pd.png\",\n    x: i,\n    y: 6\n  });\n}\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pl.png\",\n    x: i,\n    y: 1\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = \"absolute\";\n      //  activePiece.style.left = `${x}px`;\n      //  activePiece.style.top = `${y}px`;\n\n      //if x is smaller than minimun amount \n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      //If x is bigger than maximum amount\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      //if x is in the constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      //if y is smaller than minimun amount\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      //If y is bigger than maximum amount\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      //if y is in the constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      referee.isValidMove();\n\n      //updates the piece position\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === gridX && p.y === gridY) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = j + i + 2;\n      let image;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 24\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"WOplL0Qus13CGpIISUgYsfu+x4I=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useRef","useState","Tile","Referee","jsxDEV","_jsxDEV","verticalAxis","horizontalAxis","PieceType","PAWN","BISHOP","KNIGHT","ROOK","QUEEN","KING","initialBoardState","p","type","y","push","image","x","i","Chessboard","_s","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessboardRef","referee","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","isValidMove","value","map","board","j","length","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["C:/Users/zeyne/OneDrive/Desktop/chess/chess/src/components/Chessboard/Chessboard.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './Chessboard.css';\r\nimport Referee from '../../referee/Referee';\r\n\r\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n\r\nexport const PieceType = {\r\n    PAWN: \"PAWN\",\r\n    BISHOP: \"BISHOP\",\r\n    KNIGHT: \"KNIGHT\",\r\n    ROOK: \"ROOK\",\r\n    QUEEN: \"QUEEN\",\r\n    KING: \"KING\"\r\n};\r\n\r\nconst initialBoardState = [];\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n    const type = (p === 0) ? \"d\" : \"l\";\r\n    const y = (p === 0) ? 7 : 0;\r\n\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 0, y });\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 7, y });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 1, y });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 6, y });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 2, y });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 5, y });\r\n    initialBoardState.push({ image: `assets/images/q${type}.png`, x: 3, y });\r\n    initialBoardState.push({ image: `assets/images/k${type}.png`, x: 4, y });\r\n};\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pd.png\", x: i, y: 6 });\r\n}\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pl.png\", x: i, y: 1 });\r\n}\r\n\r\nexport default function Chessboard() {\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [gridX, setGridX] = useState(0);\r\n    const [gridY, setGridY] = useState(0);\r\n    const [pieces, setPieces] = useState(initialBoardState);\r\n    const chessboardRef = useRef(null);\r\n    const referee = new Referee();\r\n    \r\n    \r\n    function grabPiece(e) {\r\n        const element = e.target;\r\n        const chessboard = chessboardRef.current;\r\n\r\n        if(element.classList.contains(\"chess-piece\") && chessboard) {\r\n            \r\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            element.style.position = \"absolute\";\r\n            element.style.left = `${x}px`;\r\n            element.style.top = `${y}px`;\r\n        \r\n            setActivePiece(element);\r\n        }\r\n    }\r\n    \r\n    function movePiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n        if(activePiece && chessboard) {\r\n            const minX = chessboard.offsetLeft-25;\r\n            const minY = chessboard.offsetTop -25;\r\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\r\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            activePiece.style.position = \"absolute\";\r\n          //  activePiece.style.left = `${x}px`;\r\n          //  activePiece.style.top = `${y}px`;\r\n\r\n\r\n          //if x is smaller than minimun amount \r\n            if(x < minX) {\r\n                activePiece.style.left = `${minX}px`;\r\n            } \r\n            //If x is bigger than maximum amount\r\n            else if (x > maxX) {\r\n                activePiece.style.left = `${maxX}px`;\r\n            } \r\n            //if x is in the constraints\r\n            else {\r\n                activePiece.style.left = `${x}px`;\r\n            }\r\n\r\n            //if y is smaller than minimun amount\r\n            if(y < minY) {\r\n                activePiece.style.top = `${minY}px`;\r\n            } \r\n            //If y is bigger than maximum amount\r\n            else if (y > maxY) {\r\n                activePiece.style.top = `${maxY}px`;\r\n            } \r\n            //if y is in the constraints\r\n            else {\r\n                activePiece.style.top = `${y}px`;\r\n            }\r\n \r\n        }\r\n    }\r\n    \r\n    function dropPiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n        if(activePiece && chessboard) {\r\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100))\r\n            \r\n            referee.isValidMove();\r\n\r\n            //updates the piece position\r\n            setPieces((value) => {\r\n                const pieces = value.map(p => {\r\n                    if(p.x === gridX && p.y === gridY) {\r\n                        p.x = x;\r\n                        p.y = y;\r\n                    }\r\n                    return p;\r\n                })\r\n                return pieces;\r\n            });\r\n            setActivePiece(null);\r\n        }\r\n    }\r\n\r\n    let board = [];\r\n\r\n    for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n        for (let i = 0; i < horizontalAxis.length; i++) {\r\n            const number = j + i + 2;\r\n            let image;\r\n\r\n            pieces.forEach(p => {\r\n                if (p.x === i && p.y === j) {\r\n                    image = p.image;\r\n                }\r\n            });\r\n\r\n            board.push(<Tile key={`${i},${j}`} image={image} number={number} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div \r\n        onMouseMove={(e) => movePiece(e)} \r\n        onMouseDown={(e) => grabPiece(e)} \r\n        onMouseUp={(e) => dropPiece(e)}\r\n        id=\"chessboard\"\r\n        ref={chessboardRef}\r\n    >\r\n        {board}\r\n    </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}