{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zeyne\\\\OneDrive\\\\Desktop\\\\chess\\\\chess\\\\src\\\\components\\\\Chessboard\\\\Chessboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './Chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nexport const TeamType = [0,\n//opponent\n1 //our\n];\nexport const PieceType = [0,\n//pawn\n1,\n//bishop\n2,\n//knight\n3,\n//rook\n4,\n//queen\n5 //king\n];\nconst initialBoardState = [];\nfor (let p = 0; p < 2; p++) {\n  const teamType = p === 0 ? TeamType[0] : TeamType[1];\n  const type = teamType === TeamType[0] ? \"d\" : \"l\";\n  const y = p === 0 ? 7 : 0;\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 0,\n    y,\n    \"type\": PieceType[3],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 7,\n    y,\n    \"type\": PieceType[3],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 1,\n    y,\n    \"type\": PieceType[2],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 6,\n    y,\n    \"type\": PieceType[2],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 2,\n    y,\n    \"type\": PieceType[1],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 5,\n    y,\n    \"type\": PieceType[1],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/q${type}.png`,\n    x: 3,\n    y,\n    \"type\": PieceType[4],\n    \"team\": teamType\n  });\n  initialBoardState.push({\n    image: `assets/images/k${type}.png`,\n    x: 4,\n    y,\n    \"type\": PieceType[5],\n    \"team\": teamType\n  });\n}\n;\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pd.png\",\n    x: i,\n    y: 6,\n    type: PieceType[0],\n    \"team\": TeamType[0]\n  });\n}\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pl.png\",\n    x: i,\n    y: 1,\n    type: PieceType[0],\n    \"team\": TeamType[1]\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = \"absolute\";\n      //  activePiece.style.left = `${x}px`;\n      //  activePiece.style.top = `${y}px`;\n\n      //if x is smaller than minimun amount \n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      //If x is bigger than maximum amount\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      //if x is in the constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      //if y is smaller than minimun amount\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      //If y is bigger than maximum amount\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      //if y is in the constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n      const attackedPiece = pieces.find(p => p.x === x && p.y === y);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team);\n        setPieces(value => {\n          const pieces = value.reduce((results, piece) => {\n            if (piece.x === currentPiece.x && piece.y === currentPiece.y) {\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y)) {\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          return pieces;\n        });\n      }\n\n      //updates the piece position\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === gridX && p.y === gridY) {\n            const validMove = referee.isValidMove(gridX, gridY, x, y, p.type, p.team, value);\n            if (validMove) {\n              p.x = x;\n              p.y = y;\n            } else {\n              activePiece.style.position = 'relative';\n              activePiece.style.removeProperty('top');\n              activePiece.style.removeProperty('left');\n            }\n            ;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = j + i + 2;\n      let image;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 24\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"WOplL0Qus13CGpIISUgYsfu+x4I=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useRef","useState","Tile","Referee","jsxDEV","_jsxDEV","verticalAxis","horizontalAxis","TeamType","PieceType","initialBoardState","p","teamType","type","y","push","image","x","i","Chessboard","_s","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessboardRef","referee","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","attackedPiece","validMove","isValidMove","team","value","reduce","results","piece","map","removeProperty","board","j","length","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["C:/Users/zeyne/OneDrive/Desktop/chess/chess/src/components/Chessboard/Chessboard.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './Chessboard.css';\r\nimport Referee from '../../referee/Referee';\r\n\r\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n\r\nexport const TeamType = [\r\n    0, //opponent\r\n    1  //our\r\n];\r\n\r\nexport const PieceType = [\r\n    0, //pawn\r\n    1, //bishop\r\n    2, //knight\r\n    3, //rook\r\n    4, //queen\r\n    5  //king\r\n];\r\n\r\nconst initialBoardState = [];\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n    const teamType = (p === 0) ? TeamType[0] : TeamType[1];\r\n    const type = (teamType === TeamType[0]) ? \"d\" : \"l\";\r\n    const y = (p === 0) ? 7 : 0;\r\n\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 0, y, \"type\": PieceType[3], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 7, y, \"type\": PieceType[3], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 1, y, \"type\": PieceType[2], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 6, y, \"type\": PieceType[2], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 2, y, \"type\": PieceType[1], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 5, y, \"type\": PieceType[1], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/q${type}.png`, x: 3, y, \"type\": PieceType[4], \"team\": teamType });\r\n    initialBoardState.push({ image: `assets/images/k${type}.png`, x: 4, y, \"type\": PieceType[5], \"team\": teamType });\r\n};\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pd.png\", x: i, y: 6, type: PieceType[0], \"team\": TeamType[0] });\r\n}\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pl.png\", x: i, y: 1, type: PieceType[0], \"team\": TeamType[1] });\r\n}\r\n\r\n\r\nexport default function Chessboard() {\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [gridX, setGridX] = useState(0);\r\n    const [gridY, setGridY] = useState(0);\r\n    const [pieces, setPieces] = useState(initialBoardState);\r\n    const chessboardRef = useRef(null);\r\n    const referee = new Referee();\r\n    \r\n    \r\n    function grabPiece(e) {\r\n        const element = e.target;\r\n        const chessboard = chessboardRef.current;\r\n\r\n        if(element.classList.contains(\"chess-piece\") && chessboard) {\r\n            \r\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            element.style.position = \"absolute\";\r\n            element.style.left = `${x}px`;\r\n            element.style.top = `${y}px`;\r\n        \r\n            setActivePiece(element);\r\n        }\r\n    }\r\n    \r\n    function movePiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n        if(activePiece && chessboard) {\r\n            const minX = chessboard.offsetLeft-25;\r\n            const minY = chessboard.offsetTop -25;\r\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\r\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            activePiece.style.position = \"absolute\";\r\n          //  activePiece.style.left = `${x}px`;\r\n          //  activePiece.style.top = `${y}px`;\r\n\r\n\r\n          //if x is smaller than minimun amount \r\n            if(x < minX) {\r\n                activePiece.style.left = `${minX}px`;\r\n            } \r\n            //If x is bigger than maximum amount\r\n            else if (x > maxX) {\r\n                activePiece.style.left = `${maxX}px`;\r\n            } \r\n            //if x is in the constraints\r\n            else {\r\n                activePiece.style.left = `${x}px`;\r\n            }\r\n\r\n            //if y is smaller than minimun amount\r\n            if(y < minY) {\r\n                activePiece.style.top = `${minY}px`;\r\n            } \r\n            //If y is bigger than maximum amount\r\n            else if (y > maxY) {\r\n                activePiece.style.top = `${maxY}px`;\r\n            } \r\n            //if y is in the constraints\r\n            else {\r\n                activePiece.style.top = `${y}px`;\r\n            }\r\n \r\n        }\r\n    }\r\n    \r\n    function dropPiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n        if(activePiece && chessboard) {\r\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\r\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100))\r\n            \r\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\r\n            const attackedPiece = pieces.find(p => p.x === x && p.y === y);\r\n\r\n            if(currentPiece){\r\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team);\r\n\r\n                setPieces((value) => {\r\n                    const pieces = value.reduce((results, piece) => {\r\n                        if(piece.x === currentPiece.x && piece.y === currentPiece.y) {\r\n                            piece.x = x;\r\n                            piece.y = y;\r\n                            results.push(piece)\r\n                        } else if(!(piece.x === x && piece.y === y)) {\r\n                            results.push(piece);\r\n                        }\r\n\r\n                        return results;\r\n                    }, [])\r\n\r\n                    return pieces\r\n                })\r\n            }\r\n\r\n            //updates the piece position\r\n            setPieces((value) => {\r\n                \r\n                const pieces = value.map(p => {\r\n                    if(p.x === gridX && p.y === gridY) {\r\n                        const validMove = referee.isValidMove(gridX, gridY, x, y, p.type, p.team, value);\r\n\r\n                        if(validMove) {      \r\n                            p.x = x;\r\n                            p.y = y;\r\n                        } else {\r\n                            activePiece.style.position = 'relative';\r\n                            activePiece.style.removeProperty('top');\r\n                            activePiece.style.removeProperty('left');\r\n                        };\r\n\r\n                    }\r\n                    return p;\r\n                })\r\n                return pieces;\r\n            });\r\n            setActivePiece(null);\r\n        }\r\n    }\r\n\r\n    let board = [];\r\n\r\n    for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n        for (let i = 0; i < horizontalAxis.length; i++) {\r\n            const number = j + i + 2;\r\n            let image;\r\n\r\n            pieces.forEach(p => {\r\n                if (p.x === i && p.y === j) {\r\n                    image = p.image;\r\n                }\r\n            });\r\n\r\n            board.push(<Tile key={`${i},${j}`} image={image} number={number} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div \r\n        onMouseMove={(e) => movePiece(e)} \r\n        onMouseDown={(e) => grabPiece(e)} \r\n        onMouseUp={(e) => dropPiece(e)}\r\n        id=\"chessboard\"\r\n        ref={chessboardRef}\r\n    >\r\n        {board}\r\n    </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}