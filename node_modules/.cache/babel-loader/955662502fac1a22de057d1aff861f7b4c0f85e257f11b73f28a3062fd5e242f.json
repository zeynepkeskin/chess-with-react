{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zeyne\\\\OneDrive\\\\Desktop\\\\chess\\\\chess\\\\src\\\\components\\\\Chessboard\\\\Chessboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport Tile from '../Tile/Tile';\nimport './Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst initialBoardState = [];\nfor (let p = 0; p < 2; p++) {\n  const type = p === 0 ? \"d\" : \"l\";\n  const y = p === 0 ? 7 : 0;\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 0,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/r${type}.png`,\n    x: 7,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 1,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/h${type}.png`,\n    x: 6,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 2,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/b${type}.png`,\n    x: 5,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/q${type}.png`,\n    x: 3,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/k${type}.png`,\n    x: 4,\n    y\n  });\n}\n;\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pd.png\",\n    x: i,\n    y: 6\n  });\n}\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pl.png\",\n    x: i,\n    y: 1\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  let activePiece = null;\n  function grabPiece(e) {\n    const element = e.target;\n    if (element.classList.contains(\"chess-piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      activePiece = element;\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = \"absolute\";\n      //  activePiece.style.left = `${x}px`;\n      //  activePiece.style.top = `${y}px`;\n\n      //if x is smaller than minimun amount \n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      //If x is bigger than maximum amount\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      //if x is in the constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      //if y is smaller than minimun amount\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      //If y is bigger than maximum amount\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      //if y is in the constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    if (activePiece) {\n      const x = e.clientX;\n      const y = y.clientY;\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === 0 && p.y === 0) {\n            p.x = 5;\n            p.y = 5;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      activePiece = null;\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = j + i + 2;\n      let image;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 24\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"6kAasZLx5SPJyW6c42kcE4DAlDI=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Tile","jsxDEV","_jsxDEV","verticalAxis","horizontalAxis","initialBoardState","p","type","y","push","image","x","i","Chessboard","_s","pieces","setPieces","chessboardRef","activePiece","grabPiece","e","element","target","classList","contains","clientX","clientY","style","position","left","top","movePiece","chessboard","current","minX","offsetLeft","minY","offsetTop","maxX","clientWidth","maxY","clientHeight","dropPiece","value","map","board","j","length","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["C:/Users/zeyne/OneDrive/Desktop/chess/chess/src/components/Chessboard/Chessboard.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport Tile from '../Tile/Tile';\r\nimport './Chessboard.css';\r\n\r\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n\r\nconst initialBoardState = [];\r\n\r\n\r\nfor (let p = 0; p < 2; p++) {\r\n    const type = (p === 0) ? \"d\" : \"l\";\r\n    const y = (p === 0) ? 7 : 0;\r\n\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 0, y });\r\n    initialBoardState.push({ image: `assets/images/r${type}.png`, x: 7, y });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 1, y });\r\n    initialBoardState.push({ image: `assets/images/h${type}.png`, x: 6, y });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 2, y });\r\n    initialBoardState.push({ image: `assets/images/b${type}.png`, x: 5, y });\r\n    initialBoardState.push({ image: `assets/images/q${type}.png`, x: 3, y });\r\n    initialBoardState.push({ image: `assets/images/k${type}.png`, x: 4, y });\r\n};\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pd.png\", x: i, y: 6 });\r\n}\r\nfor (let i = 0; i < 8; i++) {\r\n    initialBoardState.push({ image: \"assets/images/pl.png\", x: i, y: 1 });\r\n}\r\n\r\nexport default function Chessboard() {\r\n    const [pieces, setPieces] = useState(initialBoardState);\r\n    const chessboardRef = useRef(null);\r\n    \r\n    let activePiece = null;\r\n\r\n  \r\n    \r\n    function grabPiece(e) {\r\n        const element = e.target;\r\n        if(element.classList.contains(\"chess-piece\")) {\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            element.style.position = \"absolute\";\r\n            element.style.left = `${x}px`;\r\n            element.style.top = `${y}px`;\r\n        \r\n            activePiece = element;\r\n        }\r\n    }\r\n    \r\n    function movePiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n        if(activePiece && chessboard) {\r\n            const minX = chessboard.offsetLeft-25;\r\n            const minY = chessboard.offsetTop -25;\r\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\r\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\r\n            const x = e.clientX -50;\r\n            const y = e.clientY -50;\r\n            activePiece.style.position = \"absolute\";\r\n          //  activePiece.style.left = `${x}px`;\r\n          //  activePiece.style.top = `${y}px`;\r\n\r\n\r\n          //if x is smaller than minimun amount \r\n            if(x < minX) {\r\n                activePiece.style.left = `${minX}px`;\r\n            } \r\n            //If x is bigger than maximum amount\r\n            else if (x > maxX) {\r\n                activePiece.style.left = `${maxX}px`;\r\n            } \r\n            //if x is in the constraints\r\n            else {\r\n                activePiece.style.left = `${x}px`;\r\n            }\r\n\r\n            //if y is smaller than minimun amount\r\n            if(y < minY) {\r\n                activePiece.style.top = `${minY}px`;\r\n            } \r\n            //If y is bigger than maximum amount\r\n            else if (y > maxY) {\r\n                activePiece.style.top = `${maxY}px`;\r\n            } \r\n            //if y is in the constraints\r\n            else {\r\n                activePiece.style.top = `${y}px`;\r\n            }\r\n \r\n        }\r\n    }\r\n    \r\n    function dropPiece(e) {\r\n        if(activePiece) {\r\n            const x = e.clientX;\r\n            const y = y.clientY;\r\n            setPieces(value => {\r\n                const pieces = value.map(p => {\r\n                    if(p.x === 0 && p.y === 0) {\r\n                        p.x = 5;\r\n                        p.y = 5;\r\n                    }\r\n                    return p;\r\n                })\r\n                return pieces;\r\n            });\r\n            activePiece = null;\r\n        }\r\n    }\r\n\r\n    let board = [];\r\n\r\n    for (let j = verticalAxis.length - 1; j >= 0; j--) {\r\n        for (let i = 0; i < horizontalAxis.length; i++) {\r\n            const number = j + i + 2;\r\n            let image;\r\n\r\n            pieces.forEach(p => {\r\n                if (p.x === i && p.y === j) {\r\n                    image = p.image;\r\n                }\r\n            });\r\n\r\n            board.push(<Tile key={`${i},${j}`} image={image} number={number} />);\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div \r\n        onMouseMove={(e) => movePiece(e)} \r\n        onMouseDown={(e) => grabPiece(e)} \r\n        onMouseUp={(e) => dropPiece(e)}\r\n        id=\"chessboard\"\r\n        ref={chessboardRef}\r\n    >\r\n        {board}\r\n    </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC7D,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE/D,MAAMC,iBAAiB,GAAG,EAAE;AAG5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EACxB,MAAMC,IAAI,GAAID,CAAC,KAAK,CAAC,GAAI,GAAG,GAAG,GAAG;EAClC,MAAME,CAAC,GAAIF,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC;EAE3BD,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;EACxEH,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,kBAAkBH,IAAI,MAAM;IAAEI,CAAC,EAAE,CAAC;IAAEH;EAAE,CAAC,CAAC;AAC5E;AAAC;AAED,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EACxBP,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,sBAAsB;IAAEC,CAAC,EAAEC,CAAC;IAAEJ,CAAC,EAAE;EAAE,CAAC,CAAC;AACzE;AACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EACxBP,iBAAiB,CAACI,IAAI,CAAC;IAAEC,KAAK,EAAE,sBAAsB;IAAEC,CAAC,EAAEC,CAAC;IAAEJ,CAAC,EAAE;EAAE,CAAC,CAAC;AACzE;AAEA,eAAe,SAASK,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAACO,iBAAiB,CAAC;EACvD,MAAMY,aAAa,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAElC,IAAIqB,WAAW,GAAG,IAAI;EAItB,SAASC,SAASA,CAACC,CAAC,EAAE;IAClB,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM;IACxB,IAAGD,OAAO,CAACE,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;MAC1C,MAAMb,CAAC,GAAGS,CAAC,CAACK,OAAO,GAAE,EAAE;MACvB,MAAMjB,CAAC,GAAGY,CAAC,CAACM,OAAO,GAAE,EAAE;MACvBL,OAAO,CAACM,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnCP,OAAO,CAACM,KAAK,CAACE,IAAI,GAAG,GAAGlB,CAAC,IAAI;MAC7BU,OAAO,CAACM,KAAK,CAACG,GAAG,GAAG,GAAGtB,CAAC,IAAI;MAE5BU,WAAW,GAAGG,OAAO;IACzB;EACJ;EAEA,SAASU,SAASA,CAACX,CAAC,EAAE;IAClB,MAAMY,UAAU,GAAGf,aAAa,CAACgB,OAAO;IACxC,IAAGf,WAAW,IAAIc,UAAU,EAAE;MAC1B,MAAME,IAAI,GAAGF,UAAU,CAACG,UAAU,GAAC,EAAE;MACrC,MAAMC,IAAI,GAAGJ,UAAU,CAACK,SAAS,GAAE,EAAE;MACrC,MAAMC,IAAI,GAAGN,UAAU,CAACG,UAAU,GAAGH,UAAU,CAACO,WAAW,GAAE,EAAE;MAC/D,MAAMC,IAAI,GAAGR,UAAU,CAACK,SAAS,GAAGL,UAAU,CAACS,YAAY,GAAE,EAAE;MAC/D,MAAM9B,CAAC,GAAGS,CAAC,CAACK,OAAO,GAAE,EAAE;MACvB,MAAMjB,CAAC,GAAGY,CAAC,CAACM,OAAO,GAAE,EAAE;MACvBR,WAAW,CAACS,KAAK,CAACC,QAAQ,GAAG,UAAU;MACzC;MACA;;MAGA;MACE,IAAGjB,CAAC,GAAGuB,IAAI,EAAE;QACThB,WAAW,CAACS,KAAK,CAACE,IAAI,GAAG,GAAGK,IAAI,IAAI;MACxC;MACA;MAAA,KACK,IAAIvB,CAAC,GAAG2B,IAAI,EAAE;QACfpB,WAAW,CAACS,KAAK,CAACE,IAAI,GAAG,GAAGS,IAAI,IAAI;MACxC;MACA;MAAA,KACK;QACDpB,WAAW,CAACS,KAAK,CAACE,IAAI,GAAG,GAAGlB,CAAC,IAAI;MACrC;;MAEA;MACA,IAAGH,CAAC,GAAG4B,IAAI,EAAE;QACTlB,WAAW,CAACS,KAAK,CAACG,GAAG,GAAG,GAAGM,IAAI,IAAI;MACvC;MACA;MAAA,KACK,IAAI5B,CAAC,GAAGgC,IAAI,EAAE;QACftB,WAAW,CAACS,KAAK,CAACG,GAAG,GAAG,GAAGU,IAAI,IAAI;MACvC;MACA;MAAA,KACK;QACDtB,WAAW,CAACS,KAAK,CAACG,GAAG,GAAG,GAAGtB,CAAC,IAAI;MACpC;IAEJ;EACJ;EAEA,SAASkC,SAASA,CAACtB,CAAC,EAAE;IAClB,IAAGF,WAAW,EAAE;MACZ,MAAMP,CAAC,GAAGS,CAAC,CAACK,OAAO;MACnB,MAAMjB,CAAC,GAAGA,CAAC,CAACkB,OAAO;MACnBV,SAAS,CAAC2B,KAAK,IAAI;QACf,MAAM5B,MAAM,GAAG4B,KAAK,CAACC,GAAG,CAACtC,CAAC,IAAI;UAC1B,IAAGA,CAAC,CAACK,CAAC,KAAK,CAAC,IAAIL,CAAC,CAACE,CAAC,KAAK,CAAC,EAAE;YACvBF,CAAC,CAACK,CAAC,GAAG,CAAC;YACPL,CAAC,CAACE,CAAC,GAAG,CAAC;UACX;UACA,OAAOF,CAAC;QACZ,CAAC,CAAC;QACF,OAAOS,MAAM;MACjB,CAAC,CAAC;MACFG,WAAW,GAAG,IAAI;IACtB;EACJ;EAEA,IAAI2B,KAAK,GAAG,EAAE;EAEd,KAAK,IAAIC,CAAC,GAAG3C,YAAY,CAAC4C,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC/C,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,cAAc,CAAC2C,MAAM,EAAEnC,CAAC,EAAE,EAAE;MAC5C,MAAMoC,MAAM,GAAGF,CAAC,GAAGlC,CAAC,GAAG,CAAC;MACxB,IAAIF,KAAK;MAETK,MAAM,CAACkC,OAAO,CAAC3C,CAAC,IAAI;QAChB,IAAIA,CAAC,CAACK,CAAC,KAAKC,CAAC,IAAIN,CAAC,CAACE,CAAC,KAAKsC,CAAC,EAAE;UACxBpC,KAAK,GAAGJ,CAAC,CAACI,KAAK;QACnB;MACJ,CAAC,CAAC;MAEFmC,KAAK,CAACpC,IAAI,eAACP,OAAA,CAACF,IAAI;QAAmBU,KAAK,EAAEA,KAAM;QAACsC,MAAM,EAAEA;MAAO,GAA1C,GAAGpC,CAAC,IAAIkC,CAAC,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiC,CAAC,CAAC;IACxE;EACJ;EAEA,oBACAnD,OAAA;IACIoD,WAAW,EAAGlC,CAAC,IAAKW,SAAS,CAACX,CAAC,CAAE;IACjCmC,WAAW,EAAGnC,CAAC,IAAKD,SAAS,CAACC,CAAC,CAAE;IACjCoC,SAAS,EAAGpC,CAAC,IAAKsB,SAAS,CAACtB,CAAC,CAAE;IAC/BqC,EAAE,EAAC,YAAY;IACfC,GAAG,EAAEzC,aAAc;IAAA0C,QAAA,EAElBd;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACvC,EAAA,CA9GuBD,UAAU;AAAA+C,EAAA,GAAV/C,UAAU;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}